y2 <- c(3.65,2.33,11.79,15.39,21.32,26.29,30.75,37.35,37.71)
x2 <- c(0,0.50,1.00,1.50,2.00,2.50,3.00,3.50,4.00)
round(cor(x,y),4)
#- Giver dig korrelationskoefficient for en lineær model (round runder til decimaler hvoraf 4 fortælle hvor mange)
round(cor(x2,log(y2)),4)
#- Giver dig korrelationskoefficient for en eksponentiel model
round(cor(log(x2),log(y2)),4)
#- Giver dig korrelationskoefficient for en allometrisk model
#Opgave 3
A <- matrix(c(0.33,0.35,0.32,0.27,0.36,0.37,0.20,0.16,0.64), nrow = 3)
# HUSK OG KØR FUCKING VERTIKALT.
A
eigenvectors = eigen(A)$vectors
eigenvectors
vek1 = eigenvectors [,1]
vek1
vek1normed = vek1/sum(vek1)
vek1normed
A%*%vek1normed
round(vek1normed,2)
#opg4
y4 <- c(3.11,7.10,11.66,6.64,6.94,6.51,7.73,12.25,8.57)
x4 <- c(0,0.50,1.00,1.50,2.00,2.50,3.00,3.50,4.00)
round(cor(x4,y4),4)
#- Giver dig korrelationskoefficient for en lineær model (round runder til decimaler hvoraf 4 fortælle hvor mange)
round(cor(x,log(y)),4)
#- Giver dig korrelationskoefficient for en eksponentiel model
round(cor(log(x2),log(y2)),4)
#- Giver dig korrelationskoefficient for en allometrisk model
#opgave 9
t.test(c(4.3, 3.8, 2.9, 3.5, 5.1),c(1.0, 0.5, 1.1, 0.9, 0.7))
t.test(c(4.3, 3.8, 2.9, 3.5, 5.1)/c(1.0, 0.5, 1.1, 0.9, 0.7))
t.test(c(4.3, 1.0), c(3.8, 0.5), c( 2.9, 1.1), c(3.5, 0.9), c(5.1, 0.7))
#opgave 11
matrix(0.21,0.25,0.54,0.40,0.50,0.10,0.10,0.21,0.69
)
#opgave 11
matrix(0.21,0.25,0.54,0.40,0.50,0.10,0.10,0.21,0.69, rcol = 3
)
#opgave 11
matrix1 <- matrix(c(0.21,0.25,0.54,0.40,0.50,0.10,0.10,0.21,0.69), ncol = 3)
matrix2 <- matrix(c(0.38,0.34,0.28))
matrix2
matrix1
matrix1 %*% matrix2
#15
y15 <- c(5.09,4.08,8.21,5.81,11.39,17.32,16.97,15.00,14.02)
x15 <- c(1.00,1.50,2.00,2.50,3.00,3.50,4.00,4.50,5.00)
round(cor(x4,y4),4)
#- Giver dig korrelationskoefficient for en lineær model (round runder til decimaler hvoraf 4 fortælle hvor mange)
round(cor(x,log(y)),4)
#- Giver dig korrelationskoefficient for en eksponentiel model
round(cor(log(x15),log(y15)),4)
#- Giver dig korrelationskoefficient for en allometrisk model
#op17
S <- c(0.33,0.83,2.0,4.0)
v <- c(0.18,0.4,0.750,1.10)
data.frame(S, v) -> datos.cinetica
#Plot the raw data
plot(datos.cinetica, type="l", main="V Vs. S", xmain="S", ymain="v")
r.S <- 1/S
r.v <- 1/v
par(new = TRUE)
#Plot the reciprocal from raw data
plot(r.S, r.v, main="Lineweaver-Burk", xlab="1/[S]",  ylab="1/v", pch=20, col="blue")
#Use linear regression to get the Lineweaver-Burk model and add a red line to the graph
lm(r.v ~ r.S) -> lineweaver.reg
abline(lineweaver.reg, col="red")
#In order to get Vmax we need to look for the values at the regression model and calculate the reciprocal
interseccion.y <- coef(lineweaver.reg)[1]
r.Vmax <- interseccion.y
Vmax <- 1/r.Vmax
#Get the slope from the regression model
pendiente <- coef(lineweaver.reg)[2]
#Get the X intersection value
interseccion.x <- -(interseccion.y/pendiente)
#Get the Km value, from the reciprocal of X intersection value
r.km <- interseccion.x
km <- -1/r.km
#Get Vmax and Km as an R vector from Lineweaver-Burk model
Lineweaver.Burk <- c(Vmax=as.numeric(Vmax), Km=as.numeric(km))
#Now we obtain the Vmax and Km from Michaelis Menten equation
Mfit <- nls(v~(Vmax*S)/(Km+S),
datos.cinetica,
start=list(Vmax=1, Km=0))
#Get a vector with the values Vmax and Km from Michaelis Menten non linear regression
Michaelis.Menten <- c(Vmax=as.numeric(coef(Mfit)[1]), Km=as.numeric(coef(Mfit)[2]))
#Plot the predicted V values from Michaelis Menten non linear regression model
plot(S, predict(Mfit), type="l", main="V Vs. S", xlab="S", ylab="v")
#And finally get a data.frame for value comparission
rbind(Lineweaver.Burk, Michaelis.Menten)
#1/vmax skæring af y
1/2.028752
#-1/km max skæring af x
-1/3.420849
#opg 18
data(DNase)
X <- DNase$density
hist(X)
x1 <- c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3)
y1 <- c(0.010,0.015,0.013,0.012,0.050,0.100,0.140,0.200,0.260,0.290,0.360,0.390,0.440)
plot(x1,y1)
plot(x1,y1,
type = "b")
y2 <- c(0.010,0.015,0.013,0.012,0.010,0.015,0.013,0.012,0.070,0.140,0.220,0.300,0.360)
plot(x,y2)
x <- c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3)
plot(x,y2)
plot(x,y1,
type = "b",
col = "blue")
par(new = TRUE)
plot(x,y2,
type = "b",
col = "red")
plot(x,y1,
type = "b",
col = "blue")
par(new = TRUE)
plot(x,y2,
type = "b",
col = "red",
xaxt = "n",
yaxt = "n")
plot(y1,x,
type = "b",
col = "blue")
par(new = TRUE)
plot(y2,x,
type = "b",
col = "red",
xaxt = "n",
yaxt = "n")
8.31446261815324*25*ln(8)
8.31446261815324*25*ln(8)
8.31446261815324*25*log(8)
8.31446261815324*25*log(0.8)
8.31446261815324*25*log(0.4)
x <- c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3)
y1 <- c(0.010,0.015,0.013,0.012,0.050,0.100,0.140,0.200,0.260,0.290,0.360,0.390,0.440)
y2 <- c(0.010,0.015,0.013,0.012,0.010,0.015,0.013,0.012,0.070,0.140,0.220,0.300,0.360)
plot(x,y1,
type = "b",
col = "blue")
par(new = TRUE)
plot(x,y2,
type = "b",
col = "red",
xaxt = "n",
yaxt = "n")
8.31446261815324*298.15*log(0.4)
8.31446261815324*25*log(0.002)
8.31446261815324*298.15*log(0.002)
8.31446261815324*25*log(0.5)
8.31446261815324*25*log(1.6)
8.31446261815324*298.15*log(1.6)
#BMB540
#Places indicated with '#' - write the indicated values
#_______________________ Part I - pH-dependence of Neutral red __________________________
# Import Your Data
x_pH <- c(5.0,
5.5,
6.5,
7.5,
8.5,
9.5,
10.5,
11.5,
12.0)
y_Abs <- c(0.244,
0.233,
0.159,
0.072,
0.037,
0.001,
0.03,
0.039,
0.029)
plot(x_pH, y_Abs)
#Estimate constants: A= Abs at low pH, B= Abs at high pH, Read off pKa
A <-max(y_Abs)
B <- min(y_Abs)
pKa <- 6.0
#Non-linear regression (Nonlinear Least Sqaures, NLS)
model <- nls(y_Abs ~ ((a*10^-x_pH + b*10^-c)/(10^-c+10^-x_pH)), start = list (a=A, b=B, c=pKa))
lines(x_pH, predict(model), col='red')
summary(model)
#Linear regression
HA <- c(A - y_Abs)
A_Base <- c(y_Abs - B)
Log_y <- log10(HA/A_Base)
Log_y
plot(x_pH, Log_y)
#Choose the subset of the data that shows a linear tendency. Leave out Inf values
SubLog_y <- Log_y[c(2,
3,
4,
5)]
Subx_pH <- x_pH[c(2,
3,
4,
5)]
plot(Subx_pH, SubLog_y)
ø
#Perform the linear regresion (Linear models, lm)
Log_model <- lm(SubLog_y ~ Subx_pH)
lines(Subx_pH, predict(Log_model), col='green')
summary(Log_model)
#BMB540
#Places indicated with '#' - write the indicated values
#_______________________ Part I - pH-dependence of Neutral red __________________________
# Import Your Data
x_pH <- c(5.0,
5.5,
6.5,
7.5,
8.5,
9.5,
10.5,
11.5,
12.0)
y_Abs <- c(0.244,
0.233,
0.159,
0.072,
0.037,
0.001,
0.03,
0.039,
0.029)
plot(x_pH, y_Abs)
#Estimate constants: A= Abs at low pH, B= Abs at high pH, Read off pKa
A <-max(y_Abs)
B <- min(y_Abs)
pKa <- 6.0
#Non-linear regression (Nonlinear Least Sqaures, NLS)
model <- nls(y_Abs ~ ((a*10^-x_pH + b*10^-c)/(10^-c+10^-x_pH)), start = list (a=A, b=B, c=pKa))
lines(x_pH, predict(model), col='red')
summary(model)
#Linear regression
HA <- c(A - y_Abs)
A_Base <- c(y_Abs - B)
Log_y <- log10(HA/A_Base)
Log_y
plot(x_pH, Log_y)
SubLog_y <- Log_y[c(2,
3,
4,
5,
7,
8,
9)]
Subx_pH <- x_pH[c(2,
3,
4,
5,
7,
8,
9)]
plot(Subx_pH, SubLog_y)
Log_model <- lm(SubLog_y ~ Subx_pH)
lines(Subx_pH, predict(Log_model), col='green')
summary(Log_model)
#Choose the subset of the data that shows a linear tendency. Leave out Inf values
SubLog_y <- Log_y[c(2,
3,
4,
5)]
Subx_pH <- x_pH[c(2,
3,
4,
5)]
plot(Subx_pH, SubLog_y)
Log_model <- lm(SubLog_y ~ Subx_pH)
lines(Subx_pH, predict(Log_model), col='green')
summary(Log_model)
#Import data.
X_Conc <- c(0,
3.069306931,
6.078431373,
9.029126214,
11.92307692,
14.76190476,
17.54716981,
20.28037383,
22.96296296,
25.59633028,
28.18181818,
30.72072072,
33.21428571)
Y_dA <- c(0.0175,
0.0306,
0.0464,
0.0549,
0.0579,
0.0581,
0.0615,
0.0634,
0.0647,
0.0664,
0.0712,
0.0687,
0.0693)
plot(X_Conc, Y_dA)
dAmax <- max(Y_dA)
k <- 6.5
kdmodel <- nls(Y_dA ~ ((dAmax * X_Conc)/(k + X_Conc)), start = list (dAmax = dAmax, k = k))
lines(X_Conc, predict(kdmodel), col='red')
summary(kdmodel)
#Define dAmax and enter an estimated value for k based on the plot
dAmax <- max(Y_dA)
plot(X_Conc, Y_dA)
k <- 4
kdmodel <- nls(Y_dA ~ ((dAmax * X_Conc)/(k + X_Conc)), start = list (dAmax = dAmax, k = k))
lines(X_Conc, predict(kdmodel), col='red')
summary(kdmodel)
k <- 6.5
#BMB540
#Places indicated with '#' - write the indicated values
#_______________________ Part I - pH-dependence of Neutral red __________________________
# Import Your Data
x_pH <- c(5.0,
5.5,
6.5,
7.5,
8.5,
9.5,
10.5,
11.5,
12.0)
y_Abs <- c(0.244,
0.233,
0.159,
0.072,
0.037,
0.001,
0.03,
0.039,
0.029)
plot(x_pH, y_Abs)
A <-max(y_Abs)
B <- min(y_Abs)
pKa <- 6.0
model <- nls(y_Abs ~ ((a*10^-x_pH + b*10^-c)/(10^-c+10^-x_pH)), start = list (a=A, b=B, c=pKa))
lines(x_pH, predict(model), col='red')
summary(model)
#Linear regression
HA <- c(A - y_Abs)
A_Base <- c(y_Abs - B)
Log_y <- log10(HA/A_Base)
Log_y
plot(x_pH, Log_y)
# Importing the necessary libraries
library(tidyverse)
# loading the Iris dataset
data(iris)
# Create a scatter plot of the data
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) +
geom_point() +
ggtitle("Iris Dataset Scatter Plot") +
xlab("Sepal Length") +
ylab("Sepal Width")
3^5
weight <- c(65, 77, 84, 82, 93)
height <- c(158, 180, 186, 179, 182)
height/100
bmi <- weight/((height/100)^2)
bmi
x<- c(2,5,2,4,6)
y<-c(4,7,5,8,11)
plot(x,y)
#Shiny app
library(shiny)
library(readxl)
library(dplyr)
library("lipidomeR")
library(plotly)
# Load the lab_dataset and sequences data if they are not already loaded
# This should be done outside of the server function if the data is static and does not change
# Otherwise, you can load it inside the server function to refresh data on app reload
# Define UI for application
ui <- fluidPage(
titlePanel("Interactive Heatmap Visualization"),
sidebarLayout(
sidebarPanel(
radioButtons("dataset", "Select data frame:",
choices = c("Original Data" = "lab_dataset", "Merged Data" = "lab_dataset_merged"),
selected = "lab_dataset"),
selectInput("group1", "Select group for numerator:",
choices = c("Class 2" = "class_2",
"Class 3" = "class_3",
"Class 4" = "class_4",
"Class 5" = "class_5",
"Class 6" = "class_6",
"Class 7" = "class_7")),
selectInput("group2", "Select group for denominator:",
choices = c("Class 2" = "class_2",
"Class 3" = "class_3",
"Class 4" = "class_4",
"Class 5" = "class_5",
"Class 6" = "class_6",
"Class 7" = "class_7")),
actionButton("show_help", "Show User Guide")
),
mainPanel(
plotlyOutput("heatmapPlot", width = "100%", height = "650px"),
dataTableOutput("pValueTable")  # Use dataTableOutput for DT::renderDataTable #shows the table
)
)
)
# Define server logic
server <- function(input, output, session) {
current_data <- reactiveVal(lab_dataset)
observeEvent(input$switch_data, {
if (identical(current_data(), lab_dataset)) {
current_data(lab_dataset_merged)
} else {
current_data(lab_dataset)
}
})
# Define a function to calculate mean class data
calculate_class_data <- function(lab_dataset, class_columns) {
class_data <- lab_dataset[, c("Compound.Name", class_columns)]
class_data$Mean <- rowMeans(class_data[, -1], na.rm = TRUE)
return(class_data)
# Reactive expression to store class data frames
reactive_class_data <- reactive({
list(
class_2 = calculate_class_data(lab_dataset, class_2_columns),
class_3 = calculate_class_data(lab_dataset, class_3_columns),
class_4 = calculate_class_data(lab_dataset, class_4_columns),
class_5 = calculate_class_data(lab_dataset, class_5_columns),
class_6 = calculate_class_data(lab_dataset, class_6_columns),
class_7 = calculate_class_data(lab_dataset, class_7_columns)
)
})
# Reactive expression for logFC
reactive_logFC <- reactive({
df <- reactive_class_data()[[input$group1]]
df$Mean <- rowMeans(df[, -1], na.rm = TRUE)
df$logFC <- log2((df$Mean + 1e-6) / (reactive_class_data()[[input$group2]]$Mean + 1e-6))
return(df$logFC)
})
# Reactive expression for p-values
reactive_p_values <- reactive({
group1_data <- reactive_class_data()[[input$group1]]
group2_data <- reactive_class_data()[[input$group2]]
# Initialize a vector to store the p-values
p_values <- numeric(nrow(group1_data))
# Loop through each lipid
for (i in 1:nrow(group1_data)) {
# Perform the t-test on the ith lipid
t_test_result <- t.test(group1_data[i, -1], group2_data[i, -1])  # -1 to exclude "Compound.Name"
# Store the p-value
p_values[i] <- t_test_result$p.value
}
# Add p-values to the data frame
df <- current_data()
df$p_values <- p_values
# Return the p-values
return(df$p_values)
})
# Render heatmap with the updated logFC values
output$heatmapPlot <- renderPlotly({
df <- current_data()
df$logFC <- reactive_logFC()
df$p_values <- reactive_p_values()
df <- df[df$logFC >= -2 & df$logFC <= 2, ]
names.mapping <- map_lipid_names(x = df$Compound.Name)
p <- heatmap_lipidome(
x = df[, c("Compound.Name", "logFC")],
names.mapping = names.mapping,
class.facet = "wrap",
x.names = "Compound.Name",
fill.limits = c(-2.5, 2.5),
fill.midpoint = 0,
melt.value.name = "logFC",
scales = "free"
)
ggplotly(p)
})
# Render the table of p-values in the UI
output$pValueTable <- renderDataTable({
df <- current_data()
df$logFC <- reactive_logFC()
df$p_values <- reactive_p_values()
df <- df[, c("Compound.Name", "logFC", "p_values")]
df
}, options = list(pageLength = 10, scrollX = TRUE))  # Options for DataTable
}
# Observe event for help button click
observeEvent(input$show_help, {
showModal(modalDialog(
title = "User Guide",
tags$ul("This app is designed for comparative lipidomic analysis."),
tags$ul("This user guide will explain how to use the interactive heatmap visualization and interpret the results.",
tags$li("Select groups for comparison using the dropdown menus."),
tags$li("The heatmap will automatically update to reflect the selected groups."),
tags$li("Hover over the heatmap to see detailed information about each lipid."),
tags$li("The color scale represents the log-fold change (logFC) values."),
tags$li("A logFC value close to zero suggests no significant change."),
tags$li("Positive logFC values indicate higher concentrations in the numerator group, meaning it is upregulated compared to the class selected in the denominator."),
tags$li("Negative logFC values suggest higher concentrations in the denominator group, indicating downregulation in the numerator group compared to the denominator."),
tags$li("The p-value table below the heatmap provides insight into the statistical significance of the observed differences in lipid concentrations between the selected groups. A p-value is a measure of the probability that the observed data would occur if there were no real effect or difference (null hypothesis). In other words, it indicates how likely it is that any observed difference in lipid concentrations happened by random chance. A low p-value (typically less than 0.05) suggests that the difference is unlikely to be due to chance, and therefore, may be considered statistically significant. Conversely, a high p-value suggests that the differences observed could easily happen by random chance and are not necessarily due to any specific cause or effect. It is important to consider the p-value in the context of the study design, sample size, and other relevant factors when interpreting the results.")
),
easyClose = TRUE,
footer = modalButton("Close")
))
})
# Run the application
shinyApp(ui = ui, server = server)
shiny::runApp('Desktop/uni/6 semester/BABMB Bachelor/Code_Bsc/GitHub/jlspec_2_0-main')
